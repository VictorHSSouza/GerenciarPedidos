@using Atividade6_Blazor.Shared;
@using Atividade6_Blazor.Services;
@using Atividade6_Blazor.Models;

<div class="container-fluid">
    <!-- Seção de Itens -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0 text-secondary">
                        <i class="bi bi-list-ul me-2"></i>Itens do Pedido
                    </h5>
                </div>
                <div class="card-body p-0">
                    <ListaItensPedido itens="pedido.Itens"></ListaItensPedido>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Seção de Cliente -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0 text-secondary">
                        <i class="bi bi-person me-2"></i>Informações do Cliente
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <label for="cliente" class="form-label fw-semibold">
                                Selecione o Cliente
                            </label>
                            <select @bind="@c_selecionado" class="form-select form-select-lg" id="cliente">
                                <option selected value="0">Escolha um cliente...</option>
                                @foreach(var c in cliente)
                                {
                                    <option value="@c.Id">@c.Nome</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            @if (c_selecionado > 0)
                            {
                                <div class="alert alert-success mb-0 w-100">
                                    <i class="bi bi-check-circle me-1"></i>
                                    Cliente selecionado!
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Botões de Ação -->
    <div class="row">
        <div class="col-12">
            <div class="d-flex gap-3 justify-content-end">
                <button class="btn btn-outline-secondary btn-lg px-4" @onclick="CancelarPedido">
                    <i class="bi bi-x-circle me-2"></i>Cancelar
                </button>
                <button class="btn btn-success btn-lg px-4" @onclick="AdicionarPedido">
                    <i class="bi bi-check-circle me-2"></i>@mensagem
                </button>
            </div>
        </div>
    </div>
</div>




@code {

    private ClienteService ClieServ = new ClienteService();
    private PedidoService PedServ = new PedidoService();
    private List<Cliente> cliente = new();
    private int c_selecionado = 0;
    private string mensagem = "Criar Pedido";

    [Parameter] public EventCallback<Pedido> AoAdicionar { get; set; }

    [Parameter] public EventCallback<Pedido> AoAtualizar { get; set; }

    [Parameter] public EventCallback AoCancelar { get; set; }

    [Parameter] public Pedido pedido { get; set; } = new Pedido();

    protected override async Task OnInitializedAsync()
    {
        if (pedido.Cliente != null)
        {
            mensagem = "Atualizar Pedido";
            c_selecionado = pedido.Cliente.Id ;
        }
        
        cliente = ClieServ.ObterTodosClientes();
        await Task.Delay(1000);
    }

    public void AdicionarPedido()
    {
        if (c_selecionado > 0 && pedido.Itens != null)
        {
            pedido.Cliente = ClieServ.ObterClientePorId(c_selecionado);

            AoAdicionar.InvokeAsync(pedido);
            pedido = new Pedido();
        }
        
    }


    public void CancelarPedido()
    {
        AoCancelar.InvokeAsync();
    }
}
