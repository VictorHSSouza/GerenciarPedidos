@using Atividade6_Blazor.Shared;
@using Atividade6_Blazor.Services;
@using Atividade6_Blazor.Models;

<div class="card border-0 shadow-sm">
    <div class="card-header bg-gradient-primary text-white">
        <h5 class="mb-0">
            <i class="bi bi-plus-circle me-2"></i>@mensagem Item
        </h5>
    </div>
    
    <div class="card-body p-4">
        <div class="mb-4">
            <label for="produto" class="form-label fw-semibold text-dark">
                <i class="bi bi-box me-1"></i>Produto
            </label>
            <select @bind="p_selecionado" class="form-select form-select-lg" id="produto">
                <option selected value="0">Selecione um produto...</option>
                @foreach (var p in Produtos)
                {
                    <option value="@p.Id">@p.Nome</option>
                }
            </select>
        </div>

        <div class="mb-4">
            <label for="quantidade" class="form-label fw-semibold text-dark">
                <i class="bi bi-123 me-1"></i>Quantidade
            </label>
            <input @bind="item.Quantidade" id="quantidade" type="number" min="1" 
                   class="form-control form-control-lg" placeholder="Digite a quantidade" />
        </div>
        
        <div class="d-flex gap-3 justify-content-end">
            <button @onclick="Cancelar" class="btn btn-outline-secondary btn-lg px-4">
                <i class="bi bi-x-circle me-1"></i>Cancelar
            </button>
            <button @onclick="Adicionar" class="btn btn-primary btn-lg px-4">
                <i class="bi bi-check-circle me-1"></i>@mensagem
            </button>
        </div>
    </div>
</div>

<style>
    .bg-gradient-primary {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    .btn {
        transition: all 0.3s ease;
    }
    
    .btn:hover {
        transform: translateY(-1px);
    }
</style>

@code {


    private ProdutoService ProdServ = new ProdutoService();
    private List<Produto> Produtos = new();
    private int p_selecionado = 0;
    private string mensagem = "Adicionar";

    [Parameter] public ItemPedido item { get; set; } = new ItemPedido();
    [Parameter] public EventCallback<ItemPedido> OnAdicionar { get; set; }
    [Parameter] public EventCallback OnCancelar { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (item.Produto != null)
        {
            p_selecionado = item.Produto.Id;
            mensagem = "Alterar";

        }

        Produtos = ProdServ.ObterTodosProdutos();

        await Task.Delay(1000);
    }

    public void Adicionar()
    {
        item.Produto = ProdServ.ObterProdutoPorId(p_selecionado);

        if (item.Produto != null && item.Quantidade > 0)
        {
            OnAdicionar.InvokeAsync(item);
        }
        
    }

    public void Cancelar()
    {
        OnCancelar.InvokeAsync();
    }
}
